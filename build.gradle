import java.nio.file.Paths

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.moowork.node'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

sourceCompatibility = 1.8
mainClassName = 'com.dovydasvenckus.todo.TodoApplication'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.sparkjava:spark-core:2.5'

    compile 'com.google.code.gson:gson:2.7'

    compile 'org.sql2o:sql2o:1.5.4'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc41'
    compile 'org.hsqldb:hsqldb:2.3.4'

    compile 'com.beust:jcommander:1.48'

    compile 'org.slf4j:slf4j-simple:1.7.21'

    testCompile 'junit:junit:4.12'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

def webBuildDir="$buildDir/todo-web"

node {
    version = '6.9.1'
    npmVersion = '3.10.9'
    download = true
}

task cleanWeb(type: Delete) {
    delete webBuildDir
    followSymlinks = true
}

task cloneWeb(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
    dir = file(webBuildDir)
    uri = 'https://github.com/dovydasvenckus/todo-web.git'
    treeish = 'origin/master'
}

task installNpm(type: NpmTask) {
    execOverrides {
        it.workingDir = webBuildDir
    }

    args = ['install']

    inputs.file { file("$webBuildDir/package.json") }
    outputs.dir { file("$webBuildDir/node_modules") }

}

task buildWeb(type: Exec) {
    def nodeRoot = '.gradle/nodejs'
    def downloadedNodeVersion = Paths.get(nodeRoot).toFile().list()?.getAt(0)
    def nodeBinPath = "$nodeRoot/${downloadedNodeVersion ?: 'node-v6.9.1-linux-x64'}/bin/node"

    workingDir webBuildDir
    commandLine "$projectDir/$nodeBinPath", "$webBuildDir/node_modules/brunch/bin/brunch", 'build'
}

task copyWeb(type: Copy) {
    from "$webBuildDir/public"
    into "src/main/resources/public"
}

task stage{
    dependsOn 'clean'
    dependsOn 'cleanWeb'
    dependsOn 'cloneWeb'
    dependsOn 'installNpm'
    dependsOn 'buildWeb'
    dependsOn 'copyWeb'
    dependsOn 'shadowJar'

    tasks.findByName('cleanWeb').mustRunAfter 'clean'
    tasks.findByName('cloneWeb').mustRunAfter 'cleanWeb'
    tasks.findByName('installNpm').mustRunAfter 'cloneWeb'
    tasks.findByName('buildWeb').mustRunAfter 'installNpm'
    tasks.findByName('copyWeb').mustRunAfter 'buildWeb'
    tasks.findByName('shadowJar').mustRunAfter 'copyWeb'
}
